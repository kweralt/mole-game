module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDS on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_cond;
    edge_detector edge (#RISE(1), #FALL(0));
    multi_dec_ctr dec_ctr;
    
    .rst(rst) {
      multi_seven_seg seg;
      game_Beta gameMachine;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // echo the serial data
    
    led = 8h00;             // turn LEDs off    

    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    button_cond.in = io_button[4]; // reduce bouncing effects of button
    edge.in = button_cond.out;     // get the edge of button press
    
    gameMachine.players_mole_buttons = edge.out;
    
    // show score value at led
    led[0] = gameMachine.debug_slowclock;
    led[1] = gameMachine.debug_vcclock;
    
    // update 7 seg
    dec_ctr.inc = gameMachine.decimal_counter_increase;
    dec_ctr.rst = gameMachine.decimal_counter_rst;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
  }
}