module game_CU (
    input clk,  // clock
    input rst,  // reset
    input increase_counter,
    input decrease_timer,
    input regfile_datain[16], //direct reading of regfile data from read_address_b
    
    // input mole_buttons,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[2],
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output decimal_counter_increase,
    output decimal_counter_rst
  ) {

  
  .clk(clk){
    fsm game_fsm={
      INIT,
      SET_SCORE_0,
      SET_OLD_LOCATIONS,
      CHECK_SCORE_30,
      BRANCH_SCORE_30,
      CHECK_SCORE_LT_10,
      BRANCH_SCORE_LT_10,
      CHECK_SCORE_LT_20,
      BRANCH_SCORE_LT_20,
      CHECK_SCORE_20,
      BRANCH_SCORE_20,
      CHECK_SCORE_10,
      BRANCH_SCORE_10,
      INC_LEVEL,
      CHECK_SCORE_0,
      BRANCH_SCORE_0,
      SET_LEVEL_1,
      SET_MOLE_TO_LEVEL,
      CHECK_MOLE_0,
      BRANCH_MOLE_0,
      SET_NEW_LOCATIONS,
      CHECK_NEW_LOCATION_LT_10,
      BRANCH_NEW_LOCATION_LT_10,
      CHECK_NEW_LOCATIONS_OLD,
      BRANCH_NEW_LOCATIONS_OLD,
      CHECK_NEW_LOCATIONS_REPEATED,
      BRANCH_NEW_LOCATIONS_REPEATED,
      DEC_MOLE,
      SET_WHACKED,
      MOLES_APPEAR,
      START_TIMER,
      IDLE,
      CHECK_TIMER_MT_0,
      BRANCH_TIMER,
      DEC_TIMER,
      CHECK_BUTTON_ADDRESS,
      BRANCH_BUTTON_ADDRESS,
      INC_WHACKED,
      CHECK_WHACKED_LEVEL,
      BRANCH_WHACKED,
      INC_SCORE,
      LOSE,
      WIN
      };
  }

always {

    // standard setting unles overwritten by each case
    alufn = 0;
    asel = 0; 
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    alu_out_sel = 0;
    
    decimal_counter_increase = 0;
    decimal_counter_rst = 0;
    
    if (rst){
        game_fsm.d = game_fsm.START_SET_TIMER;
        decimal_counter_rst = 1;
    }

    else {

    case (game_fsm.q) {
      game_fsm.INIT:
        // set output and next state
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;

      game_fsm.SET_SCORE_0:
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;

      game_fsm.SET_OLD_LOCATIONS:
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;

      game_fsm.SET_OLD_LOCATIONS:
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;
        
      game_fsm.CHECK_WHACKED_LEVEL:
        alufn = b110011; // CMPEQ
        regfile_read_address_a = b0110; // ra = 0x6
        regfile_read_address_b = b0101; // rb = 0x5
        asel = b00;
        bsel = b00;
        we_regfile = b1;
        regfile_write_address = b1110;  // rc = 0xE
        game_fsm.d = game_fsm.BRANCH_WHACKED;
        
      game_fsm.BRANCH_WHACKED:
        we_regfile = b0;
        regfile_read_address_b = b1110; // rb = 0xE
          
        // whacked == level
        if(regfile_datain[0]) {   
          game_fsm.d = game_fsm.INC_SCORE;
          } 
            
        // whacked != level
        else {
          game_fsm.d = game_fsm.IDLE;
          }
          
      game_fsm.INC_SCORE:    
        alufn = b011010; // ADD
        regfile_read_address_a = b0000; // ra = 0x0
        asel = b00;
        bsel = b01;
        we_regfile = b1;
        regfile_write_address = b0000; // rc = 0x0
        game_fsm.d = game_fsm.CHECK_SCORE_30;
         
      game_fsm.CHECK_BUTTON_ADDRESS:
        // NANI
        game_fsm.d = game_fsm.BRANCH_BUTTON_ADDRESS;
          
      game_fsm.BRANCH_BUTTON_ADDRESS:
        we_regfile = b0;
        regfile_read_address_b = b1110;
          
        // go to whacked += 1  
        if(regfile_datain[0]) {
          game_fsm.d = game_fsm.INC_WHACKED;
          }
        
        // address of button pressed != generated address
        else {
          game_fsm.d = game_fsm.LOSE;
          }
          
      game_fsm.INC_WHACKED:
        alufn = b011010; // ADD
        regfile_read_address_b = b0110; // rb = 0x6
        asel = b10;
        bsel = b00;
        we_regfile = b1;
        regfile_write_address = b0110; // rc = 0x6
        game_fsm.d = game_fsm.CHECK_WHACKED_LEVEL;
      
      game_fsm.LOSE:
        // what signal here?
        
          
      game_fsm.IDLE:
        // what if else condition to go to CHECK_BUTTON_ADDRESS/CHECK_TIMER_MT_0
          
      game_fsm.CHECK_TIMER_MT_0:
        alufn = b110101; // CMPLT
        regfile_read_address_b = b0111; // 0x7
        asel = b01;
        bsel = b00;
        we_regfile = b1;
        regfile_write_address = b1111; // 0xF
        game_fsm.d = game_fsm.BRANCH_TIMER;
          
      game_fsm.BRANCH_TIMER:
        regfile_read_address_b = b1111; // 0xF
        we_regfile = b0;
        
        // timer > 0
        if(regfile_datain[0]){
          game_fsm.d = game_fsm.DEC_TIMER;
          }
          
        // timer == 0
        else {
          game_fsm.d = game_fsm.LOSE;
          }
          
      game_fsm.DEC_TIMER:
        alufn = b000001; // SUB
        regfile_read_address_a = b0111; // 0x7
        asel = b00;
        bsel = b01;
        regfile_write_address = b0111; //0x7
        we_regfile = b1;
        game_fsm.d = game_fsm.IDLE;
          
      game_fsm.START_TIMER:
        // JUST START USING THE CODE LMAO
        game_fsm.d = game_fsm.IDLE;
      
      game_fsm.MOLES_APPEAR:
        // HOW JUST CODE IT
        game_fsm.d = game_fsm.START_TIMER;
          
      game_fsm.SET_WHACKED:
        we_regfile = b1;
        regfile_write_address = b0110; // rc = 0x6
        alu_out_sel = b01;
        game_fsm.d = game_fsm.MOLES_APPEAR;
          
      game_fsm.BRANCH_MOLE_0:
        regfile_read_address_b = b1111; // 0xF
        we_regfile = b0;
        
        // moles > 0
        if(regfile_datain[0]){
          game_fsm.d = game_fsm.SET_NEW_LOCATIONS;
          }
          
        // moles == 0
        else {
          game_fsm.d = game_fsm.SET_WHACKED;
          }
          
      game_fsm.SET_NEW_LOCATIONS:
        alufn = b011010; // ADD
        regfile_read_address_b = b1110; // rb = 0xE
        asel = b01;
        bsel = b00;
        regfile_write_address = b0011; // rc = 0x3
        game_fsm.d = game_fsm.CHECK_NEW_LOCATIONS_OLD;
          
      game_fsm.CHECK_NEW_LOCATIONS_OLD:
        alufn = b110011; // CMPEQ
        regfile_read_address_a = b1100; // ra = 0xC
        regfile_read_address_b = b1101; // rb = 0xD
        asel = b00;
        bsel = b00;
        we_regfile = b1;
        regfile_write_address = b1011; // rc = 0xB
        game_fsm.d = game_fsm.BRANCH_NEW_LOCATIONS_OLD;
          
      game_fsm.BRANCH_NEW_LOCATIONS_OLD:
        we_regfile = b0;
        regfile_read_address_b = b1011; // rb = 0xB
          
        // new location == old location
        if(regfile_datain[0]){
          game_fsm.d = game_fsm.SET_NEW_LOCATIONS;
          }
          
        // new location != old location
        else {
          game_fsm.d = game_fsm.CHECK_NEW_LOCATIONS_REPEATED;
          }
          
      game_fsm.CHECK_NEW_LOCATIONS_REPEATED:
        // Just use a for/while loop to compare over the locations in the same 16-bit thingy
        game_fsm.d = game_fsm.BRANCH_NEW_LOCATIONS_REPEATED;
          
      game_fsm.BRANCH_NEW_LOCATIONS_REPEATED: // Use 0xB to store result of prev compare
        we_regfile = b0;
        regfile_read_address_b = b1011; // rb = 0xB
        
        // wat condition to go to set_new_locations
        if(regfile_datain[0]){
          game_fsm.d = game_fsm.SET_NEW_LOCATIONS;
          }
        
        // wat condition to go to dec_mole
        else {
          game_fsm.d = game_fsm.DEC_MOLE;
          }
          
      game_fsm.DEC_MOLE:
        alufn = b000001; // SUB
        regfile_read_address_a = b0100; // ra = 0x4
        asel = b00;
        bsel = b01;
        we_regfile = b1;
        regfile_write_address = b0100; // rc = 0x4
        game_fsm.d = game_fsm.CHECK_MOLE_0;
      
      game_fsm.CHECK_MOLE_0:
        alufn = b110011; // CMPEQ
        regfile_read_address_b = b0100; // rb = 0x4
        asel = b01;
        bsel = b00;
        we_regfile = b1;
        regfile_write_address = b1111; // rc = 0xF
        game_fsm.d = game_fsm.BRANCH_MOLE_0; 
    }
  }
}
