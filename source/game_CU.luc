module game_CU (
    input clk,  // clock
    input rst,  // reset
    input increase_counter,
    input decrease_timer,
    input regfile_datain[16], //direct reading of regfile data from read_address_b
    
    input mole_buttons,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[2],
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output decimal_counter_increase,
    output decimal_counter_rst
  ) {

  
  .clk(clk){
    fsm game_fsm={
      INIT,
      SET_SCORE_0,
      SET_OLD_LOCATIONS,
      CHECK_SCORE_30,
      BRANCH_SCORE_30,
      CHECK_SCORE_LT_10,
      BRANCH_SCORE_LT_10,
      CHECK_SCORE_LT_20,
      BRANCH_SCORE_LT_20,
      CHECK_SCORE_20,
      BRANCH_SCORE_20,
      CHECK_SCORE_10,
      BRANCH_SCORE_10,
      INC_LEVEL,
      CHECK_SCORE_0,
      BRANCH_SCORE_0,
      SET_LEVEL_1,
      SET_MOLE_TO_LEVEL,
      CHECK_MOLE_0,
      BRANCH_MOLE_0,
      SET_NEW_LOCATIONS,
      CHECK_NEW_LOCATION_LT_10,
      BRANCH_NEW_LOCATION_LT_10,
      CHECK_NEW_LOCATIONS_OLD,
      BRANCH_NEW_LOCATIONS_OLD,
      CHECK_NEW_LOCATIONS_REPEATED,
      BRANCH_NEW_LOCATIONS_REPEATED,
      DEC_MOLE,
      SET_WHACKED,
      MOLES_APPEAR,
      START_TIMER,
      IDLE,
      CHECK_TIMER_MT_0,
      BRANCH_TIMER,
      DEC_TIMER,
      CHECK_BUTTON_ADDRESS,
      BRANCH_BUTTON_ADDRESS,
      INC_WHACKED,
      CHECK_WHACKED_LEVEL,
      BRANCH_WHACKED,
      INC_SCORE,
      LOSE,
      WIN
      };
  }

always {

    // standard setting unles overwritten by each case
    alufn = 0;
    asel = 0; 
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    alu_out_sel = 0;
    
    decimal_counter_increase = 0;
    decimal_counter_rst = 0;
    
    if (rst){
        game_fsm.d = game_fsm.START_SET_TIMER;
        decimal_counter_rst = 1;
    }

    else {

    case (game_fsm.q) {
      game_fsm.INIT:
        // set output and next state
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;

      game_fsm.SET_SCORE_0:
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;

      game_fsm.SET_OLD_LOCATIONS:
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;

      game_fsm.SET_OLD_LOCATIONS:
        alufn = b; // ADD
        regfile_read_address_a = b;
        bsel = b;
        asel = b;
        we_regfile = ;
        regfile_write_address = b;
        game_fsm.d = game_fsm. ;
    }
  }
}